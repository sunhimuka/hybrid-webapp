name: Auto Commit from Chat

on:
  workflow_dispatch:   # 手動トリガー
  repository_dispatch: # このチャットからの指令用

jobs:
  generate-and-commit:
    runs-on: ubuntu-latest

    steps:
      # 1. コードを取得
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Node.js セットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # 3. OpenAI API でコードを生成
      - name: Generate code from ChatGPT
        run: |
          mkdir -p pages/api
          mkdir -p pages/contact

          # フロントエンド (フォーム)
          cat << 'EOF' > pages/contact/index.tsx
          import { useState } from "react";

          export default function ContactPage() {
            const [name, setName] = useState("");
            const [email, setEmail] = useState("");
            const [message, setMessage] = useState("");
            const [status, setStatus] = useState("");

            const handleSubmit = async (e: React.FormEvent) => {
              e.preventDefault();
              setStatus("送信中…");

              const res = await fetch("/api/contact", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name, email, message }),
              });

              if (res.ok) {
                setStatus("送信完了！ありがとうございます。");
                setName("");
                setEmail("");
                setMessage("");
              } else {
                setStatus("送信に失敗しました。もう一度お試しください。");
              }
            };

            return (
              <div style={{ padding: "2rem" }}>
                <h1>お問い合わせフォーム</h1>
                <form onSubmit={handleSubmit} style={{ display: "flex", flexDirection: "column", gap: "1rem", maxWidth: "400px" }}>
                  <input
                    type="text"
                    placeholder="お名前"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    required
                  />
                  <input
                    type="email"
                    placeholder="メールアドレス"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                  />
                  <textarea
                    placeholder="お問い合わせ内容"
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    required
                  />
                  <button type="submit">送信</button>
                </form>
                <p>{status}</p>
              </div>
            );
          }
          EOF

          # バックエンド (メール送信 API)
          cat << 'EOF' > pages/api/contact.ts
          import type { NextApiRequest, NextApiResponse } from "next";
          import nodemailer from "nodemailer";

          export default async function handler(req: NextApiRequest, res: NextApiResponse) {
            if (req.method !== "POST") {
              return res.status(405).json({ message: "Method not allowed" });
            }

            const { name, email, message } = req.body;

            try {
              const transporter = nodemailer.createTransport({
                service: "gmail",
                auth: {
                  user: process.env.GMAIL_USERNAME,
                  pass: process.env.GMAIL_APP_PASSWORD,
                },
              });

              await transporter.sendMail({
                from: process.env.GMAIL_USERNAME,
                to: process.env.GMAIL_USERNAME, // あなたのGmail宛て
                subject: `新しいお問い合わせ: ${name}`,
                text: `名前: ${name}\nメール: ${email}\n\n内容:\n${message}`,
              });

              return res.status(200).json({ message: "Email sent successfully" });
            } catch (error) {
              console.error(error);
              return res.status(500).json({ message: "Error sending email" });
            }
          }
          EOF

      # 4. 依存関係 (nodemailer)
      - name: Install dependencies
        run: npm install nodemailer

      # 5. GitHub へコミット
      - name: Commit changes
        run: |
          git config --global user.name "chat-automation"
          git config --global user.email "sunhimuka1@gmail.com"
          git add .
          git commit -m "Add auto-generated Contact form with Gmail integration" || echo "No changes to commit"

      # 6. プッシュ
      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # 7. Vercel デプロイ (シークレットを使用)
      - name: Deploy to Vercel
        run: |
          npm install -g vercel
          vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes

      # 8. 成功通知をメールで送信
      - name: Send notification email
        run: |
          echo "お問い合わせフォームのデプロイが完了しました。" | mail -s "Deploy Success" ${{ secrets.GMAIL_USERNAME }}
